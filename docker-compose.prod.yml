# Production-specific Docker Compose configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # Production database with persistent volume and backup
  postgres:
    restart: always
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M

  # Production Redis with authentication
  redis:
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M

  # Production backend with optimizations
  backend:
    restart: always
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=warn
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
      replicas: 1
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

  # Production frontend with optimizations
  frontend:
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

  # Production Nginx with SSL support
  nginx:
    restart: always
    ports:
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'

  # Production monitoring and alerting
  monitoring:
    image: prom/prometheus:latest
    container_name: school_management_monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - school_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Log aggregation
  logrotate:
    image: linkyard/docker-logrotate
    container_name: school_management_logrotate
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./logs:/logs
    environment:
      - LOGROTATE_INTERVAL=daily
      - LOGROTATE_COPIES=7
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  nginx_logs_prod:
    driver: local
  prometheus_data:
    driver: local